# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, validator  # noqa: F401


class AddEngineRequest(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    AddEngineRequest - a model defined in OpenAPI

        title: The title of this AddEngineRequest.
        title_en: The title_en of this AddEngineRequest [Optional].
        subtitle: The subtitle of this AddEngineRequest.
        subtitle_en: The subtitle_en of this AddEngineRequest [Optional].
        author: The author of this AddEngineRequest.
        author_en: The author_en of this AddEngineRequest [Optional].
        description: The description of this AddEngineRequest.
        description_en: The description_en of this AddEngineRequest [Optional].
        thumbnail: The thumbnail of this AddEngineRequest.
        data: The data of this AddEngineRequest.
        configuration: The configuration of this AddEngineRequest.
        skin: The skin of this AddEngineRequest.
        background: The background of this AddEngineRequest.
        effect: The effect of this AddEngineRequest.
        particle: The particle of this AddEngineRequest.
    """

    title: str
    title_en: Optional[str] = None
    subtitle: str
    subtitle_en: Optional[str] = None
    author: str
    author_en: Optional[str] = None
    description: str
    description_en: Optional[str] = None
    thumbnail: str
    data: str
    configuration: str
    skin: str
    background: str
    effect: str
    particle: str

    @validator("title")
    def title_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("title")
    def title_max_length(cls, value):
        assert len(value) <= 100
        return value

    @validator("title_en")
    def title_en_max_length(cls, value):
        assert len(value) <= 100
        return value

    @validator("subtitle")
    def subtitle_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("subtitle")
    def subtitle_max_length(cls, value):
        assert len(value) <= 100
        return value

    @validator("subtitle_en")
    def subtitle_en_max_length(cls, value):
        assert len(value) <= 100
        return value

    @validator("author")
    def author_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("author")
    def author_max_length(cls, value):
        assert len(value) <= 50
        return value

    @validator("author_en")
    def author_en_max_length(cls, value):
        assert len(value) <= 50
        return value

    @validator("description")
    def description_max_length(cls, value):
        assert len(value) <= 3000
        return value

    @validator("description_en")
    def description_en_max_length(cls, value):
        assert len(value) <= 3000
        return value

    @validator("thumbnail")
    def thumbnail_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("thumbnail")
    def thumbnail_max_length(cls, value):
        assert len(value) <= 100
        return value

    @validator("data")
    def data_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("data")
    def data_max_length(cls, value):
        assert len(value) <= 100
        return value

    @validator("configuration")
    def configuration_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("configuration")
    def configuration_max_length(cls, value):
        assert len(value) <= 100
        return value

    @validator("skin")
    def skin_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("skin")
    def skin_max_length(cls, value):
        assert len(value) <= 100
        return value

    @validator("background")
    def background_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("background")
    def background_max_length(cls, value):
        assert len(value) <= 100
        return value

    @validator("effect")
    def effect_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("effect")
    def effect_max_length(cls, value):
        assert len(value) <= 100
        return value

    @validator("particle")
    def particle_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("particle")
    def particle_max_length(cls, value):
        assert len(value) <= 100
        return value

AddEngineRequest.update_forward_refs()
