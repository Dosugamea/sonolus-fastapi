# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, validator  # noqa: F401
from src.models.user_total import UserTotal


class User(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    User - a model defined in OpenAPI

        user_id: The user_id of this User [Optional].
        test_id: The test_id of this User [Optional].
        account_key: The account_key of this User [Optional].
        description: The description of this User [Optional].
        created_time: The created_time of this User [Optional].
        updated_time: The updated_time of this User [Optional].
        total: The total of this User [Optional].
        is_admin: The is_admin of this User [Optional].
        is_deleted: The is_deleted of this User [Optional].
    """

    user_id: Optional[str] = None
    test_id: Optional[str] = None
    account_key: Optional[str] = None
    description: Optional[str] = None
    created_time: Optional[int] = None
    updated_time: Optional[int] = None
    total: Optional[UserTotal] = None
    is_admin: Optional[bool] = None
    is_deleted: Optional[bool] = None

    @validator("user_id")
    def user_id_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("user_id")
    def user_id_max_length(cls, value):
        assert len(value) <= 30
        return value

    @validator("test_id")
    def test_id_min_length(cls, value):
        assert len(value) >= 8
        return value

    @validator("test_id")
    def test_id_max_length(cls, value):
        assert len(value) <= 8
        return value

    @validator("description")
    def description_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("description")
    def description_max_length(cls, value):
        assert len(value) <= 3000
        return value

    @validator("created_time")
    def created_time_min(cls, value):
        assert value >= 0
        return value

    @validator("updated_time")
    def updated_time_min(cls, value):
        assert value >= 0
        return value


User.update_forward_refs()
