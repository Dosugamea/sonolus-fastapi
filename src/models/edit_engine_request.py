# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, validator  # noqa: F401


class EditEngineRequest(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    EditEngineRequest - a model defined in OpenAPI

        title: The title of this EditEngineRequest [Optional].
        titleEn: The titleEn of this EditEngineRequest [Optional].
        subtitle: The subtitle of this EditEngineRequest [Optional].
        subtitleEn: The subtitleEn of this EditEngineRequest [Optional].
        author: The author of this EditEngineRequest [Optional].
        authorEn: The authorEn of this EditEngineRequest [Optional].
        description: The description of this EditEngineRequest [Optional].
        descriptionEn: The descriptionEn of this EditEngineRequest [Optional].
        thumbnail: The thumbnail of this EditEngineRequest [Optional].
        data: The data of this EditEngineRequest [Optional].
        configuration: The configuration of this EditEngineRequest [Optional].
        skin: The skin of this EditEngineRequest [Optional].
        background: The background of this EditEngineRequest [Optional].
        effect: The effect of this EditEngineRequest [Optional].
        particle: The particle of this EditEngineRequest [Optional].
        public: The public of this EditEngineRequest [Optional].
    """

    title: Optional[str] = None
    titleEn: Optional[str] = None
    subtitle: Optional[str] = None
    subtitleEn: Optional[str] = None
    author: Optional[str] = None
    authorEn: Optional[str] = None
    description: Optional[str] = None
    descriptionEn: Optional[str] = None
    thumbnail: Optional[str] = None
    data: Optional[str] = None
    configuration: Optional[str] = None
    skin: Optional[str] = None
    background: Optional[str] = None
    effect: Optional[str] = None
    particle: Optional[str] = None
    public: Optional[bool] = None

    @validator("title")
    def title_max_length(cls, value):
        assert len(value) <= 100
        return value

    @validator("titleEn")
    def titleEn_max_length(cls, value):
        assert len(value) <= 100
        return value

    @validator("subtitle")
    def subtitle_max_length(cls, value):
        assert len(value) <= 100
        return value

    @validator("subtitleEn")
    def subtitleEn_max_length(cls, value):
        assert len(value) <= 100
        return value

    @validator("author")
    def author_max_length(cls, value):
        assert len(value) <= 50
        return value

    @validator("authorEn")
    def authorEn_max_length(cls, value):
        assert len(value) <= 50
        return value

    @validator("description")
    def description_max_length(cls, value):
        assert len(value) <= 3000
        return value

    @validator("descriptionEn")
    def descriptionEn_max_length(cls, value):
        assert len(value) <= 3000
        return value

    @validator("thumbnail")
    def thumbnail_max_length(cls, value):
        assert len(value) <= 100
        return value

    @validator("data")
    def data_max_length(cls, value):
        assert len(value) <= 100
        return value

    @validator("configuration")
    def configuration_max_length(cls, value):
        assert len(value) <= 100
        return value

    @validator("skin")
    def skin_max_length(cls, value):
        assert len(value) <= 100
        return value

    @validator("background")
    def background_max_length(cls, value):
        assert len(value) <= 100
        return value

    @validator("effect")
    def effect_max_length(cls, value):
        assert len(value) <= 100
        return value

    @validator("particle")
    def particle_max_length(cls, value):
        assert len(value) <= 100
        return value


EditEngineRequest.update_forward_refs()
