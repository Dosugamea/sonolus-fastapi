# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, validator  # noqa: F401
from src.models.background import Background
from src.models.effect import Effect
from src.models.particle import Particle
from src.models.skin import Skin
from src.models.sonolus_resource_locator import SonolusResourceLocator


class Engine(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    Engine - a model defined in OpenAPI

        name: The name of this Engine [Optional].
        version: The version of this Engine [Optional].
        title: The title of this Engine [Optional].
        subtitle: The subtitle of this Engine [Optional].
        author: The author of this Engine [Optional].
        thumbnail: The thumbnail of this Engine [Optional].
        data: The data of this Engine [Optional].
        configuration: The configuration of this Engine [Optional].
        skin: The skin of this Engine [Optional].
        background: The background of this Engine [Optional].
        effect: The effect of this Engine [Optional].
        particle: The particle of this Engine [Optional].
        created_time: The created_time of this Engine [Optional].
        updated_time: The updated_time of this Engine [Optional].
        user_id: The user_id of this Engine [Optional].
        description: The description of this Engine [Optional].
    """

    name: Optional[str] = None
    version: Optional[int] = None
    title: Optional[str] = None
    subtitle: Optional[str] = None
    author: Optional[str] = None
    thumbnail: Optional[SonolusResourceLocator] = None
    data: Optional[SonolusResourceLocator] = None
    configuration: Optional[SonolusResourceLocator] = None
    skin: Optional[Skin] = None
    background: Optional[Background] = None
    effect: Optional[Effect] = None
    particle: Optional[Particle] = None
    created_time: Optional[int] = None
    updated_time: Optional[int] = None
    user_id: Optional[str] = None
    description: Optional[str] = None

    @validator("name")
    def name_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("name")
    def name_max_length(cls, value):
        assert len(value) <= 100
        return value

    @validator("version")
    def version_max(cls, value):
        assert value <= 100
        return value

    @validator("version")
    def version_min(cls, value):
        assert value >= 1
        return value

    @validator("title")
    def title_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("title")
    def title_max_length(cls, value):
        assert len(value) <= 100
        return value

    @validator("subtitle")
    def subtitle_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("subtitle")
    def subtitle_max_length(cls, value):
        assert len(value) <= 100
        return value

    @validator("author")
    def author_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("author")
    def author_max_length(cls, value):
        assert len(value) <= 50
        return value

    @validator("created_time")
    def created_time_min(cls, value):
        assert value >= 0
        return value

    @validator("updated_time")
    def updated_time_min(cls, value):
        assert value >= 0
        return value

    @validator("user_id")
    def user_id_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("user_id")
    def user_id_max_length(cls, value):
        assert len(value) <= 100
        return value

    @validator("description")
    def description_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("description")
    def description_max_length(cls, value):
        assert len(value) <= 3000
        return value

Engine.update_forward_refs()
