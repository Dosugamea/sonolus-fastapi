# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, validator  # noqa: F401
from src.models.engine import Engine
from src.models.level_use_background import LevelUseBackground
from src.models.level_use_effect import LevelUseEffect
from src.models.level_use_particle import LevelUseParticle
from src.models.level_use_skin import LevelUseSkin
from src.models.sonolus_resource_locator import SonolusResourceLocator


class Level(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    Level - a model defined in OpenAPI

        name: The name of this Level [Optional].
        version: The version of this Level [Optional].
        rating: The rating of this Level [Optional].
        engine: The engine of this Level [Optional].
        use_skin: The use_skin of this Level [Optional].
        use_background: The use_background of this Level [Optional].
        use_effect: The use_effect of this Level [Optional].
        use_particle: The use_particle of this Level [Optional].
        title: The title of this Level [Optional].
        artists: The artists of this Level [Optional].
        author: The author of this Level [Optional].
        cover: The cover of this Level [Optional].
        bgm: The bgm of this Level [Optional].
        preview: The preview of this Level [Optional].
        data: The data of this Level [Optional].
        genre: The genre of this Level [Optional].
        public: The public of this Level [Optional].
        user_id: The user_id of this Level [Optional].
        created_time: The created_time of this Level [Optional].
        updated_time: The updated_time of this Level [Optional].
        description: The description of this Level [Optional].
        length: The length of this Level [Optional].
        bpm: The bpm of this Level [Optional].
        notes: The notes of this Level [Optional].
        likes: The likes of this Level [Optional].
        mylists: The mylists of this Level [Optional].
    """

    name: Optional[str] = None
    version: Optional[int] = None
    rating: Optional[int] = None
    engine: Optional[Engine] = None
    use_skin: Optional[LevelUseSkin] = None
    use_background: Optional[LevelUseBackground] = None
    use_effect: Optional[LevelUseEffect] = None
    use_particle: Optional[LevelUseParticle] = None
    title: Optional[str] = None
    artists: Optional[str] = None
    author: Optional[str] = None
    cover: Optional[SonolusResourceLocator] = None
    bgm: Optional[SonolusResourceLocator] = None
    preview: Optional[SonolusResourceLocator] = None
    data: Optional[SonolusResourceLocator] = None
    genre: Optional[List[str]] = None
    public: Optional[bool] = None
    user_id: Optional[str] = None
    created_time: Optional[int] = None
    updated_time: Optional[int] = None
    description: Optional[str] = None
    length: Optional[int] = None
    bpm: Optional[int] = None
    notes: Optional[int] = None
    likes: Optional[int] = None
    mylists: Optional[int] = None

    @validator("name")
    def name_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("name")
    def name_max_length(cls, value):
        assert len(value) <= 100
        return value

    @validator("version")
    def version_max(cls, value):
        assert value <= 100
        return value

    @validator("version")
    def version_min(cls, value):
        assert value >= 1
        return value

    @validator("rating")
    def rating_max(cls, value):
        assert value <= 1000
        return value

    @validator("rating")
    def rating_min(cls, value):
        assert value >= 1
        return value

    @validator("title")
    def title_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("title")
    def title_max_length(cls, value):
        assert len(value) <= 100
        return value

    @validator("artists")
    def artists_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("artists")
    def artists_max_length(cls, value):
        assert len(value) <= 100
        return value

    @validator("author")
    def author_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("author")
    def author_max_length(cls, value):
        assert len(value) <= 50
        return value

    @validator("user_id")
    def user_id_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("user_id")
    def user_id_max_length(cls, value):
        assert len(value) <= 100
        return value

    @validator("created_time")
    def created_time_min(cls, value):
        assert value >= 0
        return value

    @validator("updated_time")
    def updated_time_min(cls, value):
        assert value >= 0
        return value

    @validator("description")
    def description_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("description")
    def description_max_length(cls, value):
        assert len(value) <= 3000
        return value

    @validator("length")
    def length_max(cls, value):
        assert value <= 99999
        return value

    @validator("length")
    def length_min(cls, value):
        assert value >= 0
        return value

    @validator("bpm")
    def bpm_max(cls, value):
        assert value <= 10000
        return value

    @validator("bpm")
    def bpm_min(cls, value):
        assert value >= 0
        return value

    @validator("notes")
    def notes_max(cls, value):
        assert value <= 10000000
        return value

    @validator("notes")
    def notes_min(cls, value):
        assert value >= 1
        return value

    @validator("likes")
    def likes_max(cls, value):
        assert value <= 10000000
        return value

    @validator("likes")
    def likes_min(cls, value):
        assert value >= 0
        return value

    @validator("mylists")
    def mylists_max(cls, value):
        assert value <= 10000000
        return value

    @validator("mylists")
    def mylists_min(cls, value):
        assert value >= 0
        return value


Level.update_forward_refs()
