# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, validator  # noqa: F401


class EditLevelRequest(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    EditLevelRequest - a model defined in OpenAPI

        rating: The rating of this EditLevelRequest [Optional].
        engine: The engine of this EditLevelRequest [Optional].
        skin: The skin of this EditLevelRequest [Optional].
        background: The background of this EditLevelRequest [Optional].
        effect: The effect of this EditLevelRequest [Optional].
        particle: The particle of this EditLevelRequest [Optional].
        title: The title of this EditLevelRequest [Optional].
        titleEn: The titleEn of this EditLevelRequest [Optional].
        artists: The artists of this EditLevelRequest [Optional].
        artistsEn: The artistsEn of this EditLevelRequest [Optional].
        author: The author of this EditLevelRequest [Optional].
        authorEn: The authorEn of this EditLevelRequest [Optional].
        description: The description of this EditLevelRequest [Optional].
        descriptionEn: The descriptionEn of this EditLevelRequest [Optional].
        cover: The cover of this EditLevelRequest [Optional].
        bgm: The bgm of this EditLevelRequest [Optional].
        data: The data of this EditLevelRequest [Optional].
        preview: The preview of this EditLevelRequest [Optional].
        genre: The genre of this EditLevelRequest [Optional].
        length: The length of this EditLevelRequest [Optional].
        bpm: The bpm of this EditLevelRequest [Optional].
        notes: The notes of this EditLevelRequest [Optional].
        public: The public of this EditLevelRequest [Optional].
    """

    rating: Optional[int] = None
    engine: Optional[str] = None
    skin: Optional[str] = None
    background: Optional[str] = None
    effect: Optional[str] = None
    particle: Optional[str] = None
    title: Optional[str] = None
    titleEn: Optional[str] = None
    artists: Optional[str] = None
    artistsEn: Optional[str] = None
    author: Optional[str] = None
    authorEn: Optional[str] = None
    description: Optional[str] = None
    descriptionEn: Optional[str] = None
    cover: Optional[str] = None
    bgm: Optional[str] = None
    data: Optional[str] = None
    preview: Optional[str] = None
    genre: Optional[List[str]] = None
    length: Optional[int] = None
    bpm: Optional[int] = None
    notes: Optional[int] = None
    public: Optional[bool] = None

    @validator("rating")
    def rating_max(cls, value):
        assert value <= 100
        return value

    @validator("rating")
    def rating_min(cls, value):
        assert value >= 1
        return value

    @validator("engine")
    def engine_max_length(cls, value):
        assert len(value) <= 50
        return value

    @validator("title")
    def title_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("title")
    def title_max_length(cls, value):
        assert len(value) <= 100
        return value

    @validator("titleEn")
    def titleEn_max_length(cls, value):
        assert len(value) <= 100
        return value

    @validator("artists")
    def artists_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("artists")
    def artists_max_length(cls, value):
        assert len(value) <= 100
        return value

    @validator("artistsEn")
    def artistsEn_max_length(cls, value):
        assert len(value) <= 100
        return value

    @validator("author")
    def author_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("author")
    def author_max_length(cls, value):
        assert len(value) <= 50
        return value

    @validator("authorEn")
    def authorEn_max_length(cls, value):
        assert len(value) <= 50
        return value

    @validator("description")
    def description_max_length(cls, value):
        assert len(value) <= 3000
        return value

    @validator("descriptionEn")
    def descriptionEn_max_length(cls, value):
        assert len(value) <= 3000
        return value

    @validator("cover")
    def cover_max_length(cls, value):
        assert len(value) <= 50
        return value

    @validator("bgm")
    def bgm_max_length(cls, value):
        assert len(value) <= 50
        return value

    @validator("data")
    def data_max_length(cls, value):
        assert len(value) <= 50
        return value

    @validator("preview")
    def preview_max_length(cls, value):
        assert len(value) <= 50
        return value

    @validator("length")
    def length_max(cls, value):
        assert value <= 99999
        return value

    @validator("length")
    def length_min(cls, value):
        assert value >= 0
        return value

    @validator("bpm")
    def bpm_max(cls, value):
        assert value <= 10000
        return value

    @validator("bpm")
    def bpm_min(cls, value):
        assert value >= 0
        return value

    @validator("notes")
    def notes_max(cls, value):
        assert value <= 10000000
        return value

    @validator("notes")
    def notes_min(cls, value):
        assert value >= 1
        return value


EditLevelRequest.update_forward_refs()
